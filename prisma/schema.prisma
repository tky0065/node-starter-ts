// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  customerType       CustomerType
  firstName          String
  lastName           String
  phone              String       @unique
  gender             Gender
  maxCreditLimit     Float
  maxCreditDays      Int
  unpaidCreditAmount Float?       @default(0)
  taxPin             String?
  dob                DateTime?
  email              String?      @unique
  nationalId         String?      @unique
  country            String?
  location           String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  sales Sale[]
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  email     String    @unique
  password  String
  firstName String
  lastName  String
  phone     String    @unique
  dob       DateTime?
  gender    Gender
  image     String?
  role      Role      @default(ATTENDANT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shops     Shop[]
}

model Shop {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String   @unique
  location     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  adminId      String   @db.ObjectId
  admin        User     @relation(fields: [adminId], references: [id])
  attendantIds String[] @db.ObjectId

  Products Product[]
}

model Supplier {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  supplierType       SupplierType
  name               String
  contactPerson      String
  phone              String       @unique
  email              String?      @unique
  country            String
  location           String
  website            String?
  registrationNumber String?      @unique
  bankAccountNumber  String?
  bankName           String?
  paymentTerms       String?
  logo               String?      @default("https://utfs.io/f/irA39Q64G7WRu6dordcskJy5SWnRPwVmc4jqhgAe3ZMHvdxi")
  Product            Product[]
  rating             Float?
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Unit {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  abreviation String
  slug        String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  content        String?
  sku            String    @unique
  slug           String    @unique
  productCode    String?   @unique
  image          String?   @default("https://utfs.io/f/irA39Q64G7WRu6dordcskJy5SWnRPwVmc4jqhgAe3ZMHvdxi")
  price          Float
  wholeSalePrice Float     @default(0)
  bayPrice       Float
  tax            Float?
  batchNumber    String?
  costPrice      Float
  quantity       Int
  expiryDate     DateTime?
  alertQuantity  Int
  stockQuantity  Int
  barcode        String?
  unitId         String    @db.ObjectId
  unit           Unit      @relation(fields: [unitId], references: [id])
  brandId        String    @db.ObjectId
  shopId         String    @db.ObjectId
  shop           Shop      @relation(fields: [shopId], references: [id])
  brand          Brand     @relation(fields: [brandId], references: [id])
  categoryId     String    @db.ObjectId
  category       Category  @relation(fields: [categoryId], references: [id])
  supplierId     String    @db.ObjectId
  supplier       Supplier  @relation(fields: [supplierId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  saleItems SaleItem[]
}

model Sale {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  saleNumber   String        @default(uuid())
  customerId    String        @db.ObjectId
  customerName  String
  customerEmail String?
  saleAmount   Float?
  balanceAmount Float?        @default(0)
  paidAmount    Float?        @default(0)
  creditAmount  Float?        @default(0)
  status        SaleStatus   @default(PENDING)
  saleType SaleType @default(PAID)
  paymentMethode  PaymentMethode @default(CASH)
  transactionCode String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  saleItems SaleItem[]
  customer  Customer   @relation(fields: [customerId], references: [id])
}

model SaleItem {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  productId       String   @db.ObjectId
  product         Product  @relation(fields: [productId], references: [id])
  saleId          String   @db.ObjectId
  sale            Sale     @relation(fields: [saleId], references: [id])
  quantity        Int
  productPrice    Float
  productName     String
  productImage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Role {
  ADMIN
  ATTENDANT
}

enum SaleType {
  PAID
  CREDIT
}

enum PaymentMethode {
  CASH
  MOBILE_MONEY
  BANK_TRANSFER
  CREDIT_CARD
  OTHER
}
enum SaleStatus {
  PENDING
  COMPLETED
  DELIVERED
  CANCELED
}

enum Gender {
  MALE
  FEMALE
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  OTHER
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}
