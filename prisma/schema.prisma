// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  customerType       CustomerType
  firstName          String
  lastName           String
  phone              String       @unique
  gender             Gender
  maxCreditLimit     Float // le montant maximum que le client peut avoir en crédit
  maxCreditDays      Int // le nombre de jours maximum que le client a pour payer le crédit
  unpaidCreditAmount Float        @default(0) // le montant du crédit non payé
  taxPin             String?
  dob                DateTime?
  email              String?      @unique
  nationalId         String?      @unique
  country            String?
  location           String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  sales Sale[]
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  email     String    @unique
  password  String
  firstName String
  lastName  String
  phone     String    @unique
  dob       DateTime?
  gender    Gender
  image     String?
  role      Role      @default(ATTENDANT)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  shops            Shop[]
}

model Shop {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String    @unique
  location     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  adminId      String    @db.ObjectId
  admin        User      @relation(fields: [adminId], references: [id])
  attendantIds String[]  @db.ObjectId
  sales        Sale[]
  Products     Product[]

  Expenses Expense[]
}

model Supplier {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  supplierType       SupplierType
  name               String
  contactPerson      String
  phone              String       @unique
  email              String?      @unique
  country            String
  location           String
  website            String?
  registrationNumber String?      @unique
  bankAccountNumber  String?
  bankName           String?
  paymentTerms       String?
  logo               String?      @default("https://utfs.io/f/irA39Q64G7WRu6dordcskJy5SWnRPwVmc4jqhgAe3ZMHvdxi")
  Product            Product[]
  rating             Float?
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  PurchaseOrder PurchaseOrder[]
}

model Unit {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  abreviation String
  slug        String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  content        String?
  sku            String    @unique
  slug           String    @unique
  productCode    String?   @unique
  image          String?   @default("https://utfs.io/f/irA39Q64G7WRu6dordcskJy5SWnRPwVmc4jqhgAe3ZMHvdxi")
  price          Float
  wholeSalePrice Float     @default(0)
  bayPrice       Float
  tax            Float?
  batchNumber    String?
  costPrice      Float
  quantity       Int
  expiryDate     DateTime?
  alertQuantity  Int
  stockQuantity  Int
  barcode        String?
  unitId         String    @db.ObjectId
  unit           Unit      @relation(fields: [unitId], references: [id])
  brandId        String    @db.ObjectId
  shopId         String    @db.ObjectId
  shop           Shop      @relation(fields: [shopId], references: [id])
  brand          Brand     @relation(fields: [brandId], references: [id])
  categoryId     String    @db.ObjectId
  category       Category  @relation(fields: [categoryId], references: [id])
  supplierId     String    @db.ObjectId
  supplier       Supplier  @relation(fields: [supplierId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  saleItems SaleItem[]

  AdjustementItem AdjustementItem[]

  PurchaseOrderItem PurchaseOrderItem[]
}

model Sale {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  saleNumber    String  @default(uuid())
  customerId    String  @db.ObjectId
  customerName  String
  customerEmail String?
  saleAmount    Float? // le montant total de la vente
  balanceAmount Float?  @default(0) // le montant restant à payer
  paidAmount    Float?  @default(0) // le montant payé

  status          SaleStatus     @default(PENDING)
  saleType        SaleType       @default(PAID)
  paymentMethode  PaymentMethode @default(CASH)
  transactionCode String?
  shopId          String         @db.ObjectId
  shop            Shop           @relation(fields: [shopId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  saleItems SaleItem[]
  customer  Customer   @relation(fields: [customerId], references: [id])
}

model SaleItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @db.ObjectId
  product      Product  @relation(fields: [productId], references: [id])
  saleId       String   @db.ObjectId
  sale         Sale     @relation(fields: [saleId], references: [id])
  quantity     Int
  productPrice Float
  productName  String
  productImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Payee {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  phone String  @unique
  email String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Expenses Expense[]
}

model ExpenseCategory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Expense {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  amount      Float
  description String
  attachments String[]
  expenseDate DateTime        @default(now())
  shopId      String          @db.ObjectId
  shop        Shop            @relation(fields: [shopId], references: [id])
  categoryId  String          @db.ObjectId
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  payeeId     String          @db.ObjectId
  payee       Payee           @relation(fields: [payeeId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Notification {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  status     NotificationStatus @default(INFO)
  statusText String
  read       Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Adjustement {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  ref       String            @unique
  reason    String
  items     AdjustementItem[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model AdjustementItem {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  productId     String      @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id])
  adjustementId String      @db.ObjectId
  adjustement   Adjustement @relation(fields: [adjustementId], references: [id])
  quantity      Int
  type          String
  curentStock   Int
  productName   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model PurchaseOrder {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  refNo         String
  supplierId    String              @db.ObjectId
  supplier      Supplier            @relation(fields: [supplierId], references: [id])
  status        PurchaseOrderStatus @default(PAID)
  tax           Float?
  discount      Float?
  note          String?
  balanceAmount Float
  shippingCost  Float?
  totalAmount   Float
  items         PurchaseOrderItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model PurchaseOrderItem {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  productId       String        @db.ObjectId
  productName     String
  unitCost        Float
  subTotal        Float
  currentStock    Int
  product         Product       @relation(fields: [productId], references: [id])
  purchaseOrderId String        @db.ObjectId
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PurchaseOrderStatus {
  PAID
  UNPAID
  PARTIAL
}

enum NotificationStatus {
  WARNING
  INFO
  DANGER
}

enum Role {
  ADMIN
  ATTENDANT
}

enum SaleType {
  PAID
  CREDIT
}

enum PaymentMethode {
  CASH
  MOBILE_MONEY

  BANK_TRANSFER
  CREDIT_CARD
  OTHER
}

enum SaleStatus {
  PENDING
  COMPLETED
  DELIVERED
  CANCELED
}

enum Gender {
  MALE
  FEMALE
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  OTHER
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}
